{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["parentMode","backgroundColor","childMode","App","useState","Date","toLocaleTimeString","time","setTime","mode","setMode","useEffect","tym","getMinutes","setInterval","Math","abs","className","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAkCA,IAAMA,EAAW,CACfC,gBAAiB,WAGbC,EAAU,CACdD,gBAAiB,WAGJE,EAvCf,WAAgB,IAAD,EACWC,oBAAS,IAAIC,MAAOC,sBAD/B,mBACNC,EADM,KACAC,EADA,OAEQJ,mBAAS,SAFjB,mBAENK,EAFM,KAEDC,EAFC,KAoBZ,OAhBDC,qBAAU,WAER,IAAIC,GAAI,IAAIP,MAAOQ,aACnBC,aAAa,WACVN,GAAQ,IAAIH,MAAOC,sBACT,UAAPG,GAA0D,IAAxCM,KAAKC,KAAI,IAAIX,MAAOQ,aAAaD,IAClDF,EAAQ,QACRE,GAAI,IAAIP,MAAOQ,cACH,SAAPJ,GAAyD,IAAxCM,KAAKC,KAAI,IAAIX,MAAOQ,aAAaD,KACvDF,EAAQ,SACRE,GAAI,IAAIP,MAAOQ,gBAGnB,OAED,CAACJ,IAEH,qBAAKQ,UAAU,IAAIC,MAAc,UAAPT,EAAeT,EAAWE,EAApD,SACE,kCACE,qBAAKe,UAAU,YAAYC,MAAc,UAAPT,EAAeP,EAAUF,EAA3D,SACE,6BAAKO,WCfAY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0e395ec7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [time, setTime] = useState(new Date().toLocaleTimeString());\n  const [mode,setMode]=useState(\"Light\")\n\n  useEffect(() => {\n\n    let tym=new Date().getMinutes();\n    setInterval( () => {\n       setTime(new Date().toLocaleTimeString())\n       if(mode===\"Light\" && Math.abs(new Date().getMinutes()-tym)===1){\n           setMode(\"Dark\")\n           tym=new Date().getMinutes()\n       }else if(mode===\"Dark\" && Math.abs(new Date().getMinutes()-tym)===1){\n           setMode(\"Light\")\n           tym=new Date().getMinutes()\n       }\n       // mode===\"Light\" && Math.abs(new Date().getMinutes-tym)===5?setMode(\"Dark\"):setMode(\"Light\")\n     },1000)\n   //   return () => clearInterval(setTime);\n   }, [mode]);\n   return (\n    <div className=\"b\" style={mode===\"Light\"?parentMode:childMode}>\n      <section>\n        <div className=\"container\" style={mode===\"Light\"?childMode:parentMode}>\n          <h1>{time}</h1>\n        </div>\n      </section>\n    </div>\n    // <div>{time}</div>\n  );\n}\nconst parentMode={\n  backgroundColor: \"#dbdb12\"\n  \n}\nconst childMode={\n  backgroundColor: \"#080808\"\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}